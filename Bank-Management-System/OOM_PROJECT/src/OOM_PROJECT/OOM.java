/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OOM_PROJECT;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.*;
import javax.swing.JScrollPane;
import javax.swing.*;
/**
 *
 * @author Taru
 */
public class OOM extends javax.swing.JFrame {

    /**
     * Creates new form OOM
     */
    private Bank bank;
    private String saveLocation = null;
    public OOM() {
        
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        bank = new Bank();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Deposit = new javax.swing.JButton();
        Withdraw = new javax.swing.JButton();
        accountTable = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        save = new javax.swing.JMenuItem();
        SaveAs = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Add.setText("Add Account");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });

        Remove.setText("Remove Account");
        Remove.setEnabled(false);
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });

        Deposit.setText("Deposit");
        Deposit.setEnabled(false);
        Deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositActionPerformed(evt);
            }
        });

        Withdraw.setText("Withdraw");
        Withdraw.setEnabled(false);
        Withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawActionPerformed(evt);
            }
        });

        Table.setAutoCreateRowSorter(true);
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Account No.", "Account Type", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        accountTable.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setResizable(false);
            Table.getColumnModel().getColumn(1).setResizable(false);
            Table.getColumnModel().getColumn(2).setResizable(false);
            Table.getColumnModel().getColumn(3).setResizable(false);
            Table.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Remove)
                        .addGap(38, 38, 38)
                        .addComponent(Deposit)
                        .addGap(34, 34, 34)
                        .addComponent(Withdraw))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(accountTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Add)
                    .addComponent(Remove)
                    .addComponent(Deposit)
                    .addComponent(Withdraw))
                .addGap(18, 18, 18)
                .addComponent(accountTable, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 490, 210));

        jMenu1.setText("File");

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        SaveAs.setText("Save As");
        SaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsActionPerformed(evt);
            }
        });
        jMenu1.add(SaveAs);

        open.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        jMenu1.add(Exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        // TODO add your handling code here:
        AddAccountMenu1 menu = new AddAccountMenu1(this,true);
        menu.setVisible(true);
        if(menu.getCustomer()!=null)
        {
            bank.addCustomer(menu.getCustomer());
            addCustomerToTable(menu.getCustomer());
            
        }
    }//GEN-LAST:event_AddActionPerformed
    private void removeCustomerFromTable(int row){
          DefaultTableModel model;
        model= (DefaultTableModel)Table.getModel();
        model.removeRow(Table.getSelectedRow());
        
    }
    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        // TODO add your handling code here:
        int selectedRow = Table.getSelectedRow();
        if(selectedRow >= 0) {
       Customer customer = getSelectedCustomer(selectedRow);
       if(customer!=null){
        bank.removeCustomer(customer);
        removeCustomerFromTable(selectedRow);
        }
        }
    }//GEN-LAST:event_RemoveActionPerformed
    private Customer getSelectedCustomer(int selectedRow)
    {
        Customer customer = null;
        //int selectedRow = Table.getSelectedRow();
        if(selectedRow >= 0)
        {
            String accountnumber = (String) (Table.getValueAt(selectedRow,2));
            //JOptionPane.showMessageDialog(this,accountnumber);
            //System.out.println(accountnumber);
            customer = bank.getCustomerByAccountNumber(accountnumber);
            
        }
        return customer;
    }
    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void DepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositActionPerformed
        int selectedRow = Table.getSelectedRow();
        // TODO add your handling code here:
        
        Customer customer = getSelectedCustomer(selectedRow);
        if(customer!=null){
            DepositMenu menu = new DepositMenu(this,true,customer);
            menu.setVisible(true);
            reloadCustomerRowData(selectedRow,customer);
        }
    }//GEN-LAST:event_DepositActionPerformed

    private void WithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawActionPerformed
        // TODO add your handling code here:
        int selectedRow = Table.getSelectedRow();
        // TODO add your handling code here:
        
        Customer customer = getSelectedCustomer(selectedRow);
        if(customer!=null){
            System.out.println("hii");
            WithdrawalMenu menu = new WithdrawalMenu(this,true,customer);
            menu.setVisible(true);
            reloadCustomerRowData(selectedRow,customer);
        }
    }//GEN-LAST:event_WithdrawActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        enableAccountButtons(true);
        if(evt.getClickCount()==2){
             int selectedRow = Table.getSelectedRow();
        // TODO add your handling code here:
        
        Customer customer = getSelectedCustomer(selectedRow);
        if(customer!=null){
            AccountDetails menu = new AccountDetails(this,true,customer);
            menu.setVisible(true);
        } 
        }
    }//GEN-LAST:event_TableMouseClicked

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
       if(saveLocation != null){
           saveFile(saveLocation);
       } 
       else {
           SaveAsActionPerformed(evt);
       }
    }//GEN-LAST:event_saveActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new BofFilter());
        chooser.setAcceptAllFileFilterUsed(false);
       int result =  chooser.showOpenDialog(this);
       if(result == JFileChooser.APPROVE_OPTION){
           if(!chooser.getSelectedFile().toString().toLowerCase().endsWith(".bof")){
               JOptionPane.showMessageDialog(this, "Unsupported file type selected.","Unsupported file",JOptionPane.ERROR_MESSAGE);
           }
           else{
               try {
                   FileInputStream fln = new FileInputStream(chooser.getSelectedFile());
                   ObjectInputStream objIn = new ObjectInputStream(fln);
                   Object bankdata = objIn.readObject();
                   if(bankdata instanceof Bank){
                       bank = (Bank) bankdata;
                       Reloadtable();
                   }
                   saveLocation = chooser.getSelectedFile().toString();
               } catch (FileNotFoundException ex) {
                   Logger.getLogger(OOM.class.getName()).log(Level.SEVERE, null, ex);
               } catch (IOException ex) {
                   Logger.getLogger(OOM.class.getName()).log(Level.SEVERE, null, ex);
               } catch (ClassNotFoundException ex) {
                   Logger.getLogger(OOM.class.getName()).log(Level.SEVERE, null, ex);
               }
           }
       }
        
    }//GEN-LAST:event_openActionPerformed

    private void SaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new BofFilter());
        chooser.setAcceptAllFileFilterUsed(false);
       int result =  chooser.showSaveDialog(this);
       if(result == JFileChooser.APPROVE_OPTION)
       {
           File file = chooser.getSelectedFile();
           String filename = file.toString();
           if(!(filename.toLowerCase().endsWith(".bof")))
           {
               filename += ".bof";
               
           }
            
              boolean saved =   saveFile(filename);
              if(saved) {
                  saveLocation = filename;
              }
           
       }
        
    }//GEN-LAST:event_SaveAsActionPerformed
    private void enableAccountButtons(boolean Active){
        Deposit.setEnabled(Active);
        Withdraw.setEnabled(Active);
        Remove.setEnabled(Active);
    }
    private boolean saveFile(String filename) {
        try{
            FileOutputStream fOut = new FileOutputStream(filename);
        
                ObjectOutputStream objOut = new ObjectOutputStream(fOut);
                objOut.writeObject(bank);
                objOut.close();
                
                fOut.close();
                return true;
        } catch (FileNotFoundException ex) {
            return false;
        } catch (IOException ex) {
            return false;
        }
    }
    private void reloadCustomerRowData(int selectedRow, Customer customer) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model;
        model= (DefaultTableModel)Table.getModel();
        model.setValueAt(customer.getFirstName(), selectedRow, 0);
         model.setValueAt(customer.getLastName(), selectedRow, 1);
          model.setValueAt(customer.getAccount().getAccountno(), selectedRow, 2);
                    model.setValueAt(customer.getAccount().getAccounttype(), selectedRow, 3);
           model.setValueAt(customer.getAccount().BalanceEnquiry(), selectedRow, 4);
    }
    private void Reloadtable(){
        for(Customer c : bank.getCustomers()){
            addCustomerToTable(c);
        }
    }
    private void addCustomerToTable(Customer customer)
    {
        DefaultTableModel model;
        model= (DefaultTableModel)Table.getModel();
      //  model.setRowCount(model.getRowCount()+1);
        model.addRow(new Object[]{});
        reloadCustomerRowData(model.getRowCount()-1,customer);
       // model.addRow(new Object[]{customer.getFirstName(),customer.getLastName(),customer.getAccount().getAccountno(),customer.getAccount().getAccounttype(),customer.getAccount().BalanceEnquiry()});
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OOM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OOM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JButton Deposit;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JButton Remove;
    private javax.swing.JMenuItem SaveAs;
    private javax.swing.JTable Table;
    private javax.swing.JButton Withdraw;
    private javax.swing.JScrollPane accountTable;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenuItem save;
    // End of variables declaration//GEN-END:variables

    
}
